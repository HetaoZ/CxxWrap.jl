using BinaryProvider

const JLCXX_DIR = get(ENV, "JLCXX_DIR", "")
const verbose = "--verbose" in ARGS
const prefix = Prefix(JLCXX_DIR == "" ? get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")) : JLCXX_DIR)

products = Product[
    LibraryProduct(prefix, "libcxxwrap_julia", :libcxxwrap_julia)
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaInterop/libcxxwrap-julia/releases/download/v0.3.1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Windows(:i686) => ("$bin_prefix/libcxxwrap-julia-0.7.v0.3.1.i686-w64-mingw32.tar.gz", "11189ea90a377ed7794fd6b960f840584e1ad98aaa08eaefaf1739c3f8b3c947"),
    MacOS(:x86_64) => ("$bin_prefix/libcxxwrap-julia-0.7.v0.3.1.x86_64-apple-darwin14.tar.gz", "561da832f524a700345908ab53e403fbb90beaa112d1d2782107b6b6805645e6"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/libcxxwrap-julia-0.7.v0.3.1.x86_64-linux-gnu.tar.gz", "6dd021a750b1c92be3f4c50ef45660fd62133262871305c2c9501350e8e83818"),
    Windows(:x86_64) => ("$bin_prefix/libcxxwrap-julia-0.7.v0.3.1.x86_64-w64-mingw32.tar.gz", "d9c9012a41ae6d23d3f76898451d33a85311362aaf5838add33093de7d9472e4"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
